"""
PYTHON script for importing arbitrary profiles onto DF-ISE simulation
grids for use with Sentaurus TCAD.

Gavin Forcade, 2022

This script reads a DF-ISE .dat file to determine the spatial coordinates of
of each grid point. It then generates a new .dat file containing an
OpticalGeneration profile that was calculated by FDTD. The key input/output
settings and the mapping function are indicated by comments in the code.

"""






def isfloat(num):
	try:
		float(num)
		return True
	except ValueError:
		return False


class regionArray:
	def __init__(self):
		self.x		= 0
		self.y		= 0
		self.z		= 0

"""
%DAT file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
B.10. SELECTED SOURCE CODE 27
%This should be a valid DF-ISE .dat file (i.e. generated by mesh or
%noffset3d. The meshing program must be scripted to store the x- and y-
%position of each vertex of the grid as "PMIUserField0" and
%"PMIUserField1", respectively.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""

def stitchMesh(inFileName,opticalGenFileName,dimensions):
	
	
	#initial time for the run
	t0 = time.time()



	#optical generation file
	opticalGenFile = opticalGenFileName




	#Number of data values to output per line in output DAT file
	numperline = 10


	"""
	print('--------------------------------------------------------')
	print('OptGenConverter Version 1')
	print('Gavin Forcade, 2022')
	print('University of Ottawa, SUNLAB')
	print("Running Python")
	print('--------------------------------------------------------')
	print('\n\n\n')
	"""




	print('Reading data points...')

	x = np.loadtxt(inFileName + '_x.txt')
	y = np.loadtxt(inFileName + '_y.txt')
	if dimensions == 3:
		z = np.loadtxt(inFileName + '_z.txt')
	else:
		z = np.zeros(len(x))


	print('Completed reading coordinate files')
	print(' Read ' + inFileName + ' region \n')



	"""
	Will now load optical generation results.
	"""

	print('\n\nLoading optical generation from' + opticalGenFile + '\n')

	optGenData = np.loadtxt(opticalGenFile,delimiter=',',skiprows=1,unpack=True)


	print(" Interpolating results")
	#interp_spline = interpolate.RectBivariateSpline(optGenData,x,y,z)
	interp_spline = interpolate.interp1d(optGenData[0],optGenData[1])

	#use functions to load opticalGenFile to have correct format
	def optGen(x,y,z,regionName):
		if 'em' in regionName:
			#return np.ones(len(x))
			return interp_spline(y)
		else:
			return np.zeros(len(x))




	# save array to file regionName_optGen.txt
	np.savetxt(inFileName + '_optGen.txt',optGen(x,y,z,inFileName),newline=' ')

	print('\n\nFinished writing ' + inFileName + '_optGen.txt')

				
	print("\nDone.")

	print('\n\nMesh stitching time: ' + "{:.4}".format(time.time() - t0) + ' s')




if __name__=='__main__':
	import re
	import sys
	import time
	import numpy as np
	from scipy import interpolate
	stitchMesh(*sys.argv[1:])






